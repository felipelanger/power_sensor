#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <EmonLib.h>

// Configurações Wi-Fi
const char* ssid = "Nina_2G";
const char* password = "Internet1003#";

// Configurações do servidor web
ESP8266WebServer server(80);

// Configurações do mDNS
const char* host = "powermeasurement";

// Instância do monitor
EnergyMonitor emon1;

// Configurações da rede elétrica e pino analógico
int rede = 127.0;   // Tensão da rede
int pino_sct = A0;  // Pino analógico do ESP8266

// Variável para o IP ou hostname do servidor
const char* serverAddress = "raspberrypi.local"; // Altere aqui para o IP ou hostname

// Variável para controlar o tempo de envio
unsigned long lastSendTime = 0;  // Armazena o último tempo de envio
const unsigned long sendInterval = 5000; // Intervalo de 5 segundos

void setup() {
  Serial.begin(9600);  // Inicializa comunicação serial
  
  // Conexão Wi-Fi
  WiFi.hostname(host);
  WiFi.begin(ssid, password);
  Serial.print("Conectando-se ao WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println(" Conectado!");

  // Exibe o endereço IP capturado
  Serial.print("Endereço IP: ");
  Serial.println(WiFi.localIP());

  // Configuração do mDNS
  if (MDNS.begin(host)) {
    Serial.println("mDNS responder iniciado");
    Serial.print("Acesse http://");
    Serial.print(host);
    Serial.println(".local");
  } else {
    Serial.println("Erro ao iniciar mDNS");
  }

  // Configuração do sensor SCT-013
  emon1.current(pino_sct, 29);  // Pino e calibração

  // Configuração do servidor web
  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.begin();
  Serial.println("Servidor HTTP iniciado");
}

double lerCorrente() {
  double soma = 0;
  const int n = 10;  // Número de amostras para a média

  for (int i = 0; i < n; i++) {
    soma += emon1.calcIrms(1480);
    delay(50);  // Intervalo entre amostras
  }

  return soma / n;
}

void sendData() {
  double Irms = emon1.calcIrms(1480);
  double Irms_AVG = lerCorrente();

  if (Irms < 0.05) {
    Irms = 0.0;
  }

  double potencia = Irms * rede;

  // Constrói a URL para enviar os dados ao servidor
  String url = String("http://") + serverAddress + "/power_sensor/insert.php?";
  url += "corrente=" + String(Irms, 2);
  url += "&corrente_media=" + String(Irms_AVG, 2);
  url += "&potencia=" + String(potencia, 2);

  // Envia os dados para o servidor
  WiFiClient client;
  if (client.connect(serverAddress, 80)) {  // Usa a variável serverAddress
    client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                 "Host: " + serverAddress + "\r\n" +
                 "Connection: close\r\n\r\n");
    Serial.println("Dados enviados ao servidor.");
  } else {
    Serial.println("Falha na conexão com o servidor.");
  }
  client.stop();  // Fecha a conexão
}

void handleRoot() {
  String html = "<!DOCTYPE html>";
  html += "<html><head><meta charset='UTF-8'><title>Medidor de Energia</title></head>";
  html += "<body><h1>Medidor de Energia</h1>";
  html += "<div id='data'>";
  html += "<p>Corrente: <span id='corrente'>0.00</span> A</p>";
  html += "<p>Corrente Média: <span id='correnteMedia'>0.00</span> A</p>";
  html += "<p>Potência: <span id='potencia'>0.00</span> W</p>";
  html += "</div>";
  html += "<script>";
  html += "function atualizarDados() {";
  html += "  fetch('/data').then(response => response.json()).then(data => {";
  html += "    document.getElementById('corrente').textContent = data.corrente;";
  html += "    document.getElementById('correnteMedia').textContent = data.correnteMedia;";
  html += "    document.getElementById('potencia').textContent = data.potencia;";
  html += "  });";
  html += "}";
  html += "setInterval(atualizarDados, 2000);";
  html += "</script>";
  html += "</body></html>";

  server.send(200, "text/html; charset=UTF-8", html);
}

void handleData() {
  double Irms = emon1.calcIrms(1480);
  double Irms_AVG = lerCorrente();

  if (Irms < 0.05) {
    Irms = 0.0;
  }

  double potencia = Irms * rede;

  // Responde com os dados
  String json = "{\"corrente\":" + String(Irms, 2) + ",";
  json += "\"correnteMedia\":" + String(Irms_AVG, 2) + ",";
  json += "\"potencia\":" + String(potencia, 2) + "}";

  server.send(200, "application/json; charset=UTF-8", json);
}

void loop() {
  server.handleClient();
  MDNS.update();

  // Verifica se é hora de enviar os dados
  unsigned long currentMillis = millis();
  if (currentMillis - lastSendTime >= sendInterval) {
    lastSendTime = currentMillis;
    sendData();
  }
}
